// Code generated by MockGen. DO NOT EDIT.
// Source: ../jsonHandler/jsonHandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJSONHandler is a mock of JSONHandler interface.
type MockJSONHandler struct {
	ctrl     *gomock.Controller
	recorder *MockJSONHandlerMockRecorder
}

// MockJSONHandlerMockRecorder is the mock recorder for MockJSONHandler.
type MockJSONHandlerMockRecorder struct {
	mock *MockJSONHandler
}

// NewMockJSONHandler creates a new mock instance.
func NewMockJSONHandler(ctrl *gomock.Controller) *MockJSONHandler {
	mock := &MockJSONHandler{ctrl: ctrl}
	mock.recorder = &MockJSONHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONHandler) EXPECT() *MockJSONHandlerMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockJSONHandler) Marshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockJSONHandlerMockRecorder) Marshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockJSONHandler)(nil).Marshal), v)
}

// Unmarshal mocks base method.
func (m *MockJSONHandler) Unmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockJSONHandlerMockRecorder) Unmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockJSONHandler)(nil).Unmarshal), data, v)
}
